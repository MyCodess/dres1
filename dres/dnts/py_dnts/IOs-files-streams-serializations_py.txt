______________ IO , files, directories, input, ... ________________________________
-!!  https://docs.python.org/3.10/library/io.html   bzw.  docsRF_StdLib: --> Generic Operating System Services --> io — Core tools for working with streams
-!! see also dres_1kk !!


#####  ==========  docs
	-! docsRF_StdLibs:  io — Core tools for working with streams
	-! docsRF_Tut :     7.2. Reading and Writing Files !
	-! /python-course.eu/python-tutorial/file-management.php.html
	- pydoc  open ; pydoc io  pathlib.Path , ...
	- pyCookBK_3ed : Oreilly-python-cookbook--3ed.pdf
##________________________________________  ___________________________


#################### IO-tree of IO module ... : #####################################################################
-!!  IOError is NUR an alias for OSError !! ALL input/output errors belong to OSError bzw. its alias IOError !
#####  ==========  tree-script (mod1):
-| object
-|-------| _IOBase
-|-------|-------| _BufferedIOBase          |---> Binary-IOs /Buffered-IOs : ----
-|-------|-------|-------| BytesIO       		             --->Binary-IOs-in.memory
-|-------|-------|-------| BufferedReader
-|-------|-------|-------| BufferedWriter
-|-------|-------|-------| BufferedRWPair
-|-------|-------|-------| BufferedRandom
-|-------|-------|-------| BufferedIOBase
-|-------|-------| IOBase      |---> APIs-/interfaces-/abstract-base-classes for all 3 IO-Types
-|-------|-------|-------| RawIOBase                 |--->Raw-IO-API/interface
-|-------|-------|-------| BufferedIOBase            |--->Binary-/Buffered-IO-API/interface
-|-------|-------|-------| TextIOBase                |--->Text-IOs-API/interface
-|-------|-------| _RawIOBase             	|---> Raw-IOs :------
-|-------|-------|-------| FileIO
-|-------|-------|-------| RawIOBase
-|-------|-------| _TextIOBase            	|---> Text-IOs :-----
-|-------|-------|-------| StringIO       		             --->Text-IOs-in.memory
-|-------|-------|-------| TextIOWrapper
-|-------|-------|-------| TextIOBase     		     
-|-------| _BytesIOBuffer
##________________________________________  ___________________________


#####  ==========  bzw. pydoc io :

    CLASSES
    _io._BufferedIOBase(_io._IOBase)
        _io.BufferedRWPair
        _io.BufferedRandom
        _io.BufferedReader
        _io.BufferedWriter
        _io.BytesIO
        BufferedIOBase(_io._BufferedIOBase, IOBase)
    _io._IOBase(builtins.object)
        IOBase
            BufferedIOBase(_io._BufferedIOBase, IOBase)
            RawIOBase(_io._RawIOBase, IOBase)
            TextIOBase(_io._TextIOBase, IOBase)
    _io._RawIOBase(_io._IOBase)
        _io.FileIO
        RawIOBase(_io._RawIOBase, IOBase)
    _io._TextIOBase(_io._IOBase)
        _io.StringIO
        _io.TextIOWrapper
        TextIOBase(_io._TextIOBase, IOBase)
    builtins.OSError(builtins.Exception)
        builtins.BlockingIOError
        UnsupportedOperation(builtins.OSError, builtins.ValueError)
    builtins.ValueError(builtins.Exception)
        UnsupportedOperation(builtins.OSError, builtins.ValueError)


#################### DEFs / IO-Types / ... : ###################################################################
-!!  https://docs.python.org/3.10/library/io.html   bzw.  docsRF_StdLib: --> Generic Operating System Services --> io — Core tools for working with streams
##________________________________________  ___________________________


#####  ==========  Types of IOs/streams   (IOs == streams) :
	--- types of IO-streams:
	- TYPEs of IOs/streams/"file-objects"  :   raw binary files,  buffered binary files,  text files.  bzw:
	- types of IOs :    raw I/O  ,  binary I/O  ,  text I/O  ! 
	- The canonical way to create a file object is by using the open() function.
	--- synonyms:
	- binary-IOs  ==  buffered-IOs  == bytes-IOs  :  Binary I/O ,also called buffered I/O , expects bytes-like objects and produces bytes objects.
	- raw I/O  ==  raw binary files  ==  UnBuffered binary files 
	---
	- file-object  :  _1kk: an instance of one of IO-classes (pydoc io : see classes there) 
	- file-object  :  Any object exposing a file-oriented API (read(), write(), ...). File objects are also called file-like objects or streams. Their interfaces are defined in the io module. docsRF
	- FileHandle/File-Descriptor:  A file descriptor is different than a normal open file in that it is simply an integer handle assigned by the operating system to refer to some kind of system I/O channel.
##________________________________________  ___________________________


#####  ==========  Features of IOs/streams :
	Independent of its category, each concrete stream object will also have various capabilities: 
	- It can be read-only, write-only, or read-write. 
	- It can also allow arbitrary random access (seeking forwards or backwards to any location), or 
	- It can allow only sequential access (for example in the case of a socket or pipe).
	- It can accept only certain kind of data to handle!: For example giving a str object to the write() method of a binary stream will raise a TypeError. So will giving a bytes object to the write() method of a text stream.
##________________________________________  ___________________________


#####  ==========  Text-IOs /-streams:
	- expects and produces str objects. means:
	- NewLines/EOL/\n  + encoding always implicitly done:  encoding and decoding of data is made transparently as well as optional translation of platform-specific newline characters.
	- text-IOs-API:   TextIOBase ; for in-memory:  StringIO
	- creation:  f = open("myfile.txt", "r", encoding="utf-8") ; In-memory text streams: f = io.StringIO("some initial text data")
	- open() reurnes TextIOWrapper / _io.TextIOWrapper for text-files !
	- API:  TextIOBase
	-!! text-binary-layer:  The I/O system is built from layers. Text files are constructed by adding a Unicode encoding/decoding layer on top of a buffered binary-mode file. The buffer attribute (of ALL Text-IO-Streams/filehandles, as in sys.stdout.buffer.write(b'Hello\n') ) simply points at this underlying file. If you access it, you’ll bypass the text encoding/ decoding layer. !see pyCookBK_3ed--5.17. Writing Bytes to a Text File !!
##________________________________________  ___________________________


#####  ==========  Binary-IOs / Buffered-IOs / Bytes-IOs:
	- expects bytes-like objects and produces bytes objects.  means:
	- No encoding, decoding, or newline translation is performed implicitely !
	- can be used for all kinds of non-text data, and also
	- when manual control over the handling of text data is desired (manulayy interpreting newlines, encoding-page, ...)
	- creation:  f = open("myfile.jpg", "rb")  ;  In-memory binary streams :  f = io.BytesIO(b"some initial binary data: \x00\x01")
	- API:  BufferedIOBase
##________________________________________  ___________________________


#####  ==========  Raw-IOs / UnBuffered-IOs:
	- used as a low-level building-block for binary and text streams.
	- useful to directly manipulate a raw stream from user code.
	- the rest similiar to Binary-IOs !
	- creation:  open a file in binary mode with buffering disabled:  f = open("myfile.jpg", "rb", buffering=0)
	- API:  RawIOBase
##________________________________________  ___________________________



#################### open/read/write/seek/... files : ###############################################################

#####  ==========  PAth handlings ...:
-!  pydoc pathlib.Path  ##absolute/relative/resolving-links/mkdir/rename/permissions/....
##________________________________________  ___________________________


#####  ==========  filesIO : opening/handling files/DIRs/filesystem/... :
	-!! chk1:   py_dres_1kk/filesIOs1.py !
##________________________________________  ___________________________


#####  ==========  open():
	- open("file1", "w", encoding='utf-8') : existing file1 will be first DELETED/emptyd ! checking if exists?:  os.path.isfile("file1")
	- os.path.isfile("file1")   :  True if the file1 exists ! 
	--- OS.files-infos/... :
	- os.path.isfile/.isdir/.islink/.realpath/.getsize/.listdir/... !
	- sys.getdefaultencoding()  :  OS/system-default-encoding
##________________________________________  ___________________________


#####  ==========  <with>-clause/keyword for open() : 
	- eg:  with open('file1') as fh:  txt1 = fh.read() ; ....
	- eg:  with open('somefile.txt', 'rt', encoding='latin-1') as fh1:  ...
	- <with> automatically closes the file, EVEN in case of exceptions, after leaving the  <with>-secion ! The scope of the opened filehandle is ONLY limited to the body of the with-section !
		- If we use with"-keyword , we do not have to explicitly close the file. The file will be closed automatically, when the with blocks ends. Without with, we have to explicitly close the file,
		- There is a more important difference between them: If an exception occurs inside of the ẁith block, the file will be closed. If an exception occurs in the variant without with before the close, the file will not be closed. This means, you should alwawys use the "Python context manager" form, also known as the "with statement". 
	- check if closed??:    fh1.closed ;  ##-> True
##________________________________________  ___________________________


#####  ==========  read-AND-write-same-filehandle / "w+" , "r+"  :
	see pydoc open :
	"r+"  will not delete the content of the file, if exists ! so to open an existing file for read and write, you should better use "r+" !
	"w+"  will delete the content of the file, if exists !
##________________________________________  ___________________________


#####  ==========  readxxx() / writexxx() nts:  read()/write()/readline/writeline/readlines/writelines :
	--- \n , NewLine-separator NOT added/removed automatically !!  NO-implicit-NL(\n) is added/deleted in the lines by  readline/writeline/readlines/writelines !!:
		- Note that, unlike print() function, readxxx()/writexxx() methods do not print/remove newline character (\n) at the end of string automatically.
		so if you want lines/list-elements/string-objects/... be separated by NL, you have to EXPLICITELY add/delete it to the string-arguments for reads/write-methods !!
		so readxx/writexxx does NOT delete/add any \n automatically !!
	--- read (n) / readline / readlines() :
		- read-return-type  <class 'str'> for text-IOs  /  <class 'bytes'> for binaryIOs/bytesIOs (an immutable array of bytes, see  pydoc bytes) ##--->  see py_dres_1kk/filesIOs1.py !
		- read(10) : 10 is inkl.EOL (\n) if there, read 10 chars (textfiles) or 10 bytes (binaryfiles)! for both text/byte the EOL, if there, take one position, and either decoded/interoreted as real New-Line(\n) for text-streams, /OR shown literally as '\n' for byte-sterams
		- read()   : reads the entire file for textfiles and returns it as one string(textfile)/bytes(binaryfile)i-obj
	--- write...(...):
		-! "print()"-redirection:   with open('somefile.txt', 'rt') as f:   print('Hello World!', file=f)
		-!! binary <---> txt-writes:  MUST use decode()/encode() !!: see pyCookBK_3ed--5.4 ! 
		- only-if-file1-NOT-exist, create+write to it: "x"-mode of open! :  with open('somefile', 'xt') as f:  f.write('Hello\n');
##________________________________________  ___________________________


#####  ==========  line-wise reading/handling file:
	- with open("ad_lesbiam.txt", "r") as fh: for line in fh: ;  print(line.strip()) ; ...  ##--/OR:
	- fh = open("ad_lesbiam.txt") ;for line in fh:  print(line.strip()) ; ... ; fh.close()  ##--/OR:
	- readline()   : line1 = fh.readline() ...
	- readlines() , returns a LIST of textfile-lines!:  txt2 = fh2.readlines() ; for line1 in txt2: print (line1 , end="") ;
	-! converting-textfileLines-into-a-list-object / readlines--into-a-list:   fh1=open("t1.txt", "r") ; l5 = list(fh1)
	-! Note that it’s already possible to iterate on file objects using for line in file: ... without calling file.readlines(). ##--as in above eg seen !
##________________________________________  ___________________________


#####  ==========  seek(offset[, whence]) :
	-! in pydoc the offset is named "target" !
	-!! NOT always has the "expected" effect ! and NOT all filehandles are seekable!! so docs!
	-!  If the file is opened in text mode (without ‘b’), ONLY offsets returned by tell() are legal.
	- if opened with a+ , works for consequtive readings, BUT any seek() operations will be undone at the next write  !
##________________________________________  ___________________________


#####  ==========  encoding/decoding for files/filehandles ;  bytes <---> text  :

	_______:  
	- see  pyCookBK_3ed--5.1 Reading Wrtiting ... :-
	- encode:  char-to-code/digit, so like ord() ! you yan ONLY write bytes/binarys into a bina-filehandle. So to write chars into it it must be encoded into bytes !! eg: string MUST be encoded to write as bytes into binary-filehandle! eg:  print("ABCD".encode()[2]) --> 67  #-ord(C)==0x43==67
	- decode:  code/digit-to-char, so like chr() ! you yan ONLY write chars/text    into a text-filehandle. So to write bytes into it it must be decoded into chars !! eg: string MUST be encoded to write as bytes into binary-filehandle! eg:  print(b"\x43".decode())   --> C  #-ord(C)==0x43==67

	_______:  decode/encode, convert text <---> bytes :
	- read  text from a binary-filehandle:  with open('somefile.bin', 'rb') as f:  data = f.read(16) ; text = data.decode('utf-8')
	- write text to   a binary-filehandle:  with open('somefile.bin', 'wb') as f:  text = 'Hello'    ; f.write(text.encode('utf-8'))
	--
	There are two ways to turn a byte string into a string again after:   text_binary = open("see_you_tomorrow.txt", "rb").read()
	t = text_binary.decode("utf-8")  ##--/OR:   t2 = str(text_binary, "utf-8")   ;  see :  /python-course.eu/python3_file_management.php.html

	_______:  text-binary-layer-access , pyCookBK_3ed :5.17. Writing Bytes to a Text File :
	- writing bytes to a text handle WITHOUT decoding (without applying decode() to the bytes, as above! BUT applying decoding is the RIGHT/prefered/correct-option!):
	-!!  The I/O system is built from layers. Text files are constructed by adding a Unicode encoding/decoding layer on top of a buffered binary-mode file. The buffer attribute (of ALL Text-IO-Streams/filehandles, as in sys.stdout.buffer.write(b'Hello\n') ) simply points at this underlying file. If you access it, you’ll bypass the text encoding/ decoding layer. !see pyCookBK_3ed--5.17. Writing Bytes to a Text File !!
	- eg:   with open(textfileOut1, "wt") as fh1:   fh1.buffer.write(b"---binary-layer-accessed-through buffer attrib of the text-stream:\nxx\nyy\nzz\n") ##--see-dres !

	_______:  TIPs:
	- UTF-8 is usually a safe bet if working with web applications.  ascii corresponds to the 7-bit characters in the range U+0000 to U+007F. latin-1 is a direct mapping of bytes 0-255 to Unicode characters U+0000 to U+00FF.
	-! latin-1 encoding is notable in that it will never produce a decoding error when reading text of a possibly unknown encoding. Reading a file as latin-1 might not produce a completely correct text decoding, but it still might be enough to extract useful data out of it. Also, if you later write the data back out, the original input data will be preserved. : see pyCookBK_3ed--5.1 Reading Wrtiting ...

	_______:  py-encoding-utils-... :
	- sys.getdefaultencoding()  :  OS/system-default-encoding
	- sys.stdout.encoding , ...
##________________________________________  ___________________________


#####  ==========  in-memory streams:    also see  pyCookBK_3ed--5...
	- text:          io.StringIO
	- bytes/binary:  io.BytesIO
##________________________________________  ___________________________


#####  ==========  Performance of IOs:
	- see docsRF_StdLib--Generic...--IO--:Performance :
	- Buffered Binary IO > unbuffered/Raw Binary IO > Text IO !
	- Text IO Perf.: due to encoding-conversion slower. For BigDatas use  TextIOWrapper + in-memory-bytes as StringIO / BytesIO !
##________________________________________  ___________________________


#####  ==========  IO-Errors ...:
	pydoc errno  :listing of all numbers for errors ...!
	errno/error-code  to  err-text :  os.strerror(error_code)  #- An error code contained in errno can be translated into text form by the os.strerror(error_code) function.
##________________________________________  ___________________________

