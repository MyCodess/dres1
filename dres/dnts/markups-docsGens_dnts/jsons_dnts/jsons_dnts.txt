________________________ json dnts: __________________________________________________

#####  ==========  nts/urls/...:
	Ref:  https://www.json.org/
	PyRefDocs/html/library/json.html
	https://quickref.me/json.html   : cheat sheet / QRef
##________________________________________  ___________________________


#####  ========== validate / reformat/ /pretty/ beautyfiers/... :
	--- cmds:
	-  cat t1.json  | jq   #-validates the file end prints out beautified!
	--- Py: 
	- python -m json.tool  -h   ;  pydoc json.tool ;PyRefDoc-StdLib: json package
	-- eg:
	- python -m json.tool  f1.json  f1--pretty.json     ##--validate + pretty-reformatted-output of  f1.json into  f1--pretty.json !
	- python -m json.tool --compact  f1.json  f1--compact.json   ##--compact-output
	- echo '{"json":"obj"}' | python -m json.tool
##________________________________________  ___________________________


#####  ==========  cmdline-utils,...:
	_______:  jo : create jsons out of x=y,...   :  see eg in man jo , https://github.com/jpmens/jo
		- creates json (dict or list) from stdin/args ! eg:
		- jo a=b c=d xx=yy   #-->  {"a":"b","c":"d","xx":"yy"}
		- pretty-print with -p :    jo -p a=b c=d xx=yy
		- Pretty-print an array with a list of files in the current directory:    jo -p -a *

	_______:  jq : jq is like sed for JSON data! validating/extracting/filtering/replacing/pretty-printing/... , https://jqlang.github.io/jq/

	_______:  json_pp : converts + format/prettyPrint/beautify json files ; man json_pp :, eg:
		- cat sa-services.log.1 | json_pp >| sa-services.log.2
		- cat sa-services.log.1 | json_pp  -json_opt pretty,canonical  >| sa-services.log.2
##________________________________________  ___________________________

