introspections_py, obj-/class-queryings_py :
=========================================================================================


#####  ==========  libs/... for introspects/inspects/dynamic-loading+introspecting/...
	- pyStdLibs: inspect, importlib, pyclbr, tokenize, pkgutil
##________________________________________  ___________________________


#####  ==========  __dict__/dir/vars/locals/globals/... introspections-funcs/attribs of classes/modules/... : ==================== 

	_______:  allg:
	- py-lookup-seq:  locals() > globals() > builtins : until it finds the first occurrence of the target name! so:
		import builtins;   pylookup = ChainMap(locals(), globals(), vars(builtins))

	_______:  locals() :
	- ! so NOT obj1.locals() , but just locals() ! ist immer bezogen auf cu-module/-namescope !!
    - locals() returns a dict of all local vars + values in the current scope/namespace- !   pydoc locals ;
	- locals() builtin :  Returns a dictionary containing the current scope's local vars+values.
	- for name, value in locals().items(): print  ('{0:20} ==  {1}'.format(name, value)) ;
	- basically  Returns  the __dict__ attribute for a module, class, instance, or any other object with a __dict__ attribute :

	_______:  globals() :
	- ! so NOT obj1.globals() , but just globals() ! ist immer bezogen auf cu-module/-namescope !!
    - dict containing the current scope's global vars+values
	- for name, value in globals().items(): print  ('{0:20} ==  {1}'.format(name, value)) ;

	_______:  obj1.__dict__  ( == vars(obj1)):
	- __dict__ is NOT reliable to check/list all obj-attribs,...! use instead the inspect module! but it is fine for quick direct obj-attr/-members check!
	- obj1.__dict__ : obj1’s (WRITABLE) attributes Dictionary ! so:
	- obj1.__dict__   ==  vars(obj1)
	- class-attr or obj-props are NOT in __dict__ !
	- NOT having  __dict__ : if list/dict/... ,OR: __slots__ is defined in the obj-class ,OR: if obj-class is abstract !! for slot see: https://stackoverflow.com/questions/472000/usage-of-slots/28059785#28059785
	- module1.__dict__ ,  module1.__dict__.values() 
    - printout-beauty-dict:
		- print-out: best use:  vars(obj1)   ##--OR:
		import pprint; pprint.pp(obj1.__dict__);   ##--/OR pprint.pprint(tab=...,..) ; #/OR manually:
		print("{\n  ", "\n  ".join("{:20s}  ::  {}".format(k,v) for k,v in sorted(d11.items())), "\n}", sep="")  ##--: d11 = module1.__dict__ 
	- ! see also:  https://stackoverflow.com/questions/19907442/explain-dict-attribute

	_______:  vars(entity1):
	-  so NOT obj1.vars()  , but  vars(obj1) !
	- vars(obj1)  ==  obj1.__dict__
	- vars()      ==  locals()               ##-- Without an argument, vars() acts like locals().
    - dict of local vars/attribs (names + values)   pydoc vars :

	_______:  dir(entity1) /ent1. __dir__() :    --> basically intellisense-completion (without-values! for values use locals() !) :
    - List all methods/vars/attribs/funcs-NAMES_only of the current-obj/class/module/... ,  EXCEPT builtins ones! : no values, only-NAMES! returns not-dict, only LIST !   
    - see  pydoc dir / builtins  , docsRF--6.3. The dir() Function :
	- dir() : If called without an argument, return a LIST of the names in the current scope (so as vars(), but only names, not their values !).
	- Note that it lists all types of names: variables, modules, functions, etc. except the builtins ! so it does not list the names of built-in functions and variables. 
	- dir(module1) : the module's attributes.  eg: dir(sys) ,so (like __dict__)
	- dir(class1)  : its attributes, and recursively the attributes of its bases.
	- for any other object: its attributes, its class's attributes, and recursively the attributes of its class's base classes.
    - import module1;  dir(module1)
##________________________________________  ___________________________


#####  ==========  "inspect" StdLib-module:
    _______:  inspect StdLib :
    - pydoc  inspect + https://pymotw.com/3/inspect/index.html
	- module-stdlib:   inspect - Get useful information from live Python objects.  ; pydoc  inspect
    --- usages/eg:
	- inspect.getmembers(<obj/module/class/...>, Bedingung/predicate/filter)
	--- for ii in [x for x in inspect.getmembers(<obj/module/class/...>) if not str(x[0]).startswith("__")]: print(ii)
		/OR use predicate-arg of getmembers, as eg:  inspect.getmembers(x, predicate=inspect.ismethod)  
		-!!- BUT if using predicate-arg/filter, then the predicate-func is provided with the x and: x is the VALUE part of the tuple (name, value)! NOT the name element!! as in:
		-!- for ii in [inspect.getmembers(settings, lambda x: str(x).startswith("T"))]: print(ii) ##--so here eg all tuples with the VALUE of (xxx, Txxx) are printed out!
    - FilePath/location of an imported module:  import os; print("- file-location of rthe module: ", inspect.getfile(os))
	- classtree:   from inspect import getclasstree ;...
    - mro:   inspect.getmro(class1)
	- import inspect ; inspect.isfunction(func1) ; inspect.getmodule(func1)
	--- more :
	- see also StdLib:  pyclbr — Python module browser , tokenize — Tokenizer for Python source , bzw. https://pymotw.com/3/pyclbr/index.html#module-pyclbr
##________________________________________  ___________________________


#####  ==========  "traceback" StdLib-module:
    - pydoc traceback : Extract, format and print information about Python stack traces.
##________________________________________  ___________________________


#####  ==========  tree-classes / subclasses / class-hierarchy_printout / class-tree / ... :
    - ! see dres:  *tree*.py !!
    - all subclasses of a cls sorted by name:  for ii in sorted(tuple.__subclasses__(), key=lambda x: x.__name__): print (ii)  
##________________________________________  ___________________________

