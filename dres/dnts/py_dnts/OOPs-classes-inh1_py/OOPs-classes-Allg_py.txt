________________ Classes/Objects/methods/... in py: ___________________________
-! pydoc  CLASSES , ATTRIBUTEMETHODS, CALLABLEMETHODS, ...
##________________________________________  ___________________________



#####  ==========  initialization of objects , instances-default--initialization-procedure:
    - see:  https://realpython.com/python-metaclasses/#custom-metaclasses  :
    When the interpreter encounters x = Foo(), then:
    1-  __call__() method of Foo’s parent class is called. __call__() method in turn invokes the following:
    2-  __new__()
    3-  __init__()
    - ! nts: If Foo does not define __new__() and __init__(), default methods are inherited from Foo’s ancestry. But if Foo does define these methods, they override those from the ancestry, which allows for customized behavior when instantiating Foo.
    - ! classesTreeDiagrams generation,...:  sphinx.ext.inheritance_diagram ,  sphinx.ext.graphviz
##________________________________________  ___________________________


#####  ==========  "CLASS-Vars  <--->  Obj-Vars ! class-Static-Vars access+assignments :

	_______:  -- !!TRICKY!: DIFF: read-OR-write access to Class-vars through the instance !! , !! see devres1kk:  cl1_classVar_instanceCounter.py :
	---!! obj1.CVAR1 reads the class-attrib C1.CVAR1
	---!! BUT write-access : obj1.CVAR1 = 5 creates a NEW instance-atrib !!
	---!! so obj1.CVAR1 += 2 which is basically obj1.CVAR1 = obj1.CVAR1 +1 : reads the class-var CVAR1 (read-access), then creates a new instance-attrib CVAR1 (due to write-acces), and then adds two to it !!
	---!! so obj1.CVAR1 read-access: reads the class-var! obj1.CVAR1 = 20 : creates a new instance-var and leaves the class-var UNchanged!
	---!!WATCH: so DIFF  by write-access:  obj1.CVAR1 = 20   and   obj1.__class__.CVAR1 = 20 !! the first creates new instance-var, the second modifies the class-var !
	---!! from-inside-a-class-method to access the classvar, do:  type(self).CVAR1  /OR directly classname: C1.CVAR1 !
	---!! by read-acces both are the same, IF there is NO instance-attrib CVAR1 ! so then both access the class-var CVAR1 !!

	_______:  --
    !! DIFF: Obj-read-access-to-CLASS-Vars <---> Obj-WRITE-access-to-CLASS-Vars :  by obj1.cvar1=30 the CLASS-Var cvar1 will NOT be addressed, but the  object obj1 gets a new Instance-attrib as cvar1 !! C1.var=3 will change classe1-var-value !!
    !! be careful, if you want to change a class attribute, you have to do it with the notation ClassName.AttributeName.
    Otherwise, you will create a new instance variable. We demonstrate this in the following example

	_______:  -- class static attribs:
	- accessing class static attribs of obj1:  type(self).classVar1 /OR  self.__class__.classVar1
##________________________________________  ___________________________


#####  ==========  inheritance-Allg: subclassing-Allg:

	_______:  ! Allg-Rule in py-Inheritance:
	- Allg: basically as a general rule: in contrast to java, any subclass-method overrides the baseclass-method, WITHOUT implicitly calling the overridden-baseclass-method ! incl. __init__/__del__ !
	if gewuenscht, then the baseclass-method must be called explicitly as eg super().__del__() , ... !
	basically ANY  method in a subclass (incl. __init__) will OVERWRITES the one in the upperclasses WITHOUT implicitly invoking them!! including __init__/__del__ !
	so if desired, then have to EXPLICITELY call the overwritten upperclass method !!
	so even the __init() in a subclass will NOT automatically call the uperclass __init__()  !! if desired, then call it explicitely, as super().__init__() !
	-!  most specific version must be taken first and then least specific (generic) version the last! :
	so if c->B->A : class D1(A,C) does NOt work! mro-error! but D2(C,A) ok ! ##-->  class D1(A,C) results in:  TypeError: Cannot create a consistent method resolution order (MRO) for bases

	_______:  comparing objects :
	-! Object type comparisons should always use isinstance(o1, c1) instead of comparing type(o1) directly (due to subclassing) !! see: PEP-8 !

	_______:  override  methods of baseclass in subclass:
	-! DIFF:   Distinction between Overwriting, Overloading and Overriding  : see python-course.eu/python3_inheritance.php.html  !
	- overriding the bsseclass-method in a subclass will NOT automatically calls the baseclass one!! the subclass-method can call it with BaseClass1.method1() /OR super().method1 !!
		!! this is valid also for constructors/destructors methods  __init__(self) , __del__(self) !!
##________________________________________  ___________________________


#####  ==========  inheritance: `__init__(self) , __del__(self) by :  __init__()/__del__() in subclasses  (de-/constructors in subclasses)`  : 
	https://docs.python.org/3/reference/datamodel.html#basic-customization

	_______:  as all other methods: definig a method in a subclass overrides the one in the baseclass WITHOUT calling it implicitely! so:
	the __init__ /__del__  of the derived-/subclass does NOT automatically calls the one of the base-/upper-class, if the subclass has defined its own __init__/__del__ !
	except if there is NO subclass-__init__ defined at all, so then the super().__init__() wille be executed as default !
	__init__ may ONLY return None (if at all!) !! better, just no explicit return !!
	RefDocs-- https://docs.python.org/3/reference/datamodel.html#basic-customization :
	the derived class’s __init__() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance ! /OR just NOT defining ANY __init__ method (then the first baseclass-init will be called automaticallay) !

	_______:  so if the derived CLASS:
	- does NOT have its own constructor, then the first-found-__init__ of a superclass is invoked IMPLICITLY/automatically during class creation;
	- has its own constructor, then a superclass constructor has to be invoked EXPLICITLY.
	- : So, basically any func/method in a class zunächst overwrites FULLY the same-of-parent-classes, except if the parents-one is EXPLICITLY called by the current-class (NO implicit call by interpreter! im Gegensatz zu java!) !

	_______:  req:
	- __init__  may NOT return any values/obj !! ("return None" is OK! but not needed!) 
	- __init__ is just a normal method and can be again from other class methods (BUT should NOT be! makes no sense!

	_______:  __new__() :  https://docs.python.org/3/reference/datamodel.html#basic-customization :
	you do not need to use/know it (except for MetaClasses,...), but just for info:
	by creating any new instance: first object.__new__(cls1[,self, ...]) is executed and then cls1.__init__(self) !
	for initialization/creation of any obj1=cls1() : first object.__new__(cls[, ...]) is Called to create a new instance of class. The return value of __new__() should be the new object instance (usually an instance of cls).
##________________________________________  ___________________________


#####  ==========  Querying-objects /-classes :

    _______:  objects-quering:
	- type(obj1)    :  its class
	- dir (obj1) 	:  names in the direct scope of obj1
	- obj1.__dict__ : object’s (writable) attributes Dictionary.
	--- classes-quering:
	- dir(class1)  : its attributes, and RECURSIVELY the attributes of its bases/upper-classes , dir(str)
##________________________________________  ___________________________


#####  ==========  classMethods, staticMethods ,  @classmethod <--->  @staticmethod  :
	- see:  https://www.python-course.eu/python3_class_and_instance_attributes.php#Class-Methods

	_______:  ! DIFF: classmethod  <--->  staticmethod :  classmethod gets an impicit "self"-first-param to the CLASS and are defined also as "def cl-method1(cls)", similar to __init__(self) for objects/instances ! staticmethods NOT ! :
	- Staticmethods shouldn't be confused with class methods. Like static methods class methods are not bound to instances, but unlike static methods class methods are bound to a class. The first parameter of a class method is a reference to a class, i.e. a class object
	- both can be called via an instance /OR the class name.
	- classmethods  are often used, where we have static methods, which have to call other static methods. To do this, we would have to hard code the class name, if we had to use static methods. This is a problem, if we are in a use case, where we have inherited classes.
	- classmethods are used also for factorys !
	---
##________________________________________  ___________________________


#####  ==========  `__repr__ , __str__` :
	-! see  python-course.eu/python3_object_oriented_programming.php.html
	- always must ba able to create new obj by repr, so :  obj2 = eval(repr(obj1)) with type(obj1) == type(obj2)  ##so means also always must:  type(obj1) == eval(repr(obj1))

	_______:  
	__str__  : for End-User-Presentations:  is always the right choice, if the output should be for the end user or in other words, if it should be nicely printed.
	__repr__ : for Developers/Coding     :  on the other hand is used for the internal representation of an object (developers or Coding). The output of __repr__ should be - if feasible - a string which can be parsed by the python interpreter. The result of this parsing is in an equal object. That is, the following should be true for an object "o":  o == eval(repr(o))
	--
	1- If a class has a __str__ method, the method will be used for an instance x of that class, if either the function str is applied to it or if it is used in a print function. __str__ will not be used, if repr is called, or if we try to output the value directly in an interactive Python shell.
	2- Otherwise, if a class has only the __repr__ method and no __str__ method, __repr__ will be applied in the situations, where __str__ would be applied, if it were available.
##________________________________________  ___________________________


#####  ==========  private members / name-Mangling :

	-!! see  dres/codecs1_dres/py_dres_1kk/OOPs-classes-inh1/cl1_nameMangling_isinstance_hasattr.py
	- name mangling:  the private member __x1 of the class C1 (bzw. of its instance obj1) is just basically renamed/managled to _C__x1 !
	so it is basically noch accessible by: __obj1._C1_x1 ! but do not do it !
	-!!BUT  name-Mangling will NOT work if you add an instance variable outside the class code !
	-!! private-methods can be called ONLY through an instance+name-Mangling, as: o1._C1__m1() ! not through the class itself!
##________________________________________  ___________________________


#####  ==========  property(), @property decorator, properties/props :

	_______:  ! see 
	docsRF- Built-in Functions --> property()
	pyCookBK-3ed--8.6. Creating Managed Attributes
	Bklein_Tuts_py/HTMLs-BKlein-python_tutorial_1WE_1DW/Tut2-OOP_Py-Htmls-BKlein/03-Properties-vs-getters-and-setters.html

	_______:  @property decorator:
	-!! see dres_1kk:  props1.py , propsxxxx.py !
	--- nts-prop-decorator + eg :
	- here a typical/standard usage:
	class C1:
    def __init__(self, p1): self.x1= p1
    @property
    def x1(self): return self.__x1
    @x1.setter
    def x1(self, p1): self.__x1 = p1+10 
	- nts to the eg:
	!!THE tag which defines/initilizes a pror of a class is ONLY "@property" tag !! and so the property/attrib defined here is called "x1" ! and NOT __x1, or _x1, ...!
	then the defined prop has the same name as under "@property" tag (here "x1") !! which internally is defined as _<classname>__<propName> (here: _C1__x1 ) !
	the rest are only options as: @x1.setter , @x1.deleter , or initialising in __init__ , ....
	the ACCESS (read/write) to this prop, outside its @tagged-funcs (: setter/getter/deleter), MUST be ONLY through prop-name self.x1 !! and NOT self.__x1 or self._C1__x1, ...!!
	by accessing to the prop x1 through self._C1__x1 (instead self.x1) the prop-getter/setter will NOT be executed !! (umgangen!)
	inside its @tagged-funcs (: setter/getter/deleter) you must use your defined var, usu. __<prop-name-defined-by the "@property" decorator> ,
	as here: __x1  !otherwise by using eg self.x1 you get into endless-recursions !! (but it does NOT have to be called that way, it could also be _x1 or __y2, ...! depends on your property-requirements!)
	---

	_______:  
	- two ways, same:  builtin-func  property()  /OR  @-decorator:  @property [ + @x1.setter + @x1.deleter ]
	-! only the @property tag esteblishes x1 as a property, which also the getter-func ! eg (@property def x1(self): return self.__x1 )
	- readOnly-prop creating : see exp docsRF- Built-in Functions --> property()
##________________________________________  ___________________________


#####  ==========  ABCs / Abstract Base Classes :
	pydoc  abc
	/python-course.eu/oop/the-abc-of-abstract-base-classes.php.html

	_______:  
	eg/syntax :  from abc import ABC, abstractmethod ; clacc abs1(ABC): ...; @abstractmethod ;  def abs_method1(self):  pass /OR basic-common-implementaion ; ....; NOW a subclass of abs1 MUST implement abs_method1 (NOT-declaring as @abstractmethod any more!) !
	A class that is derived from an abstract class (extended ABC or its subclasses) cannot be instantiated unless all of its abstract methods are overridden/implemented.
	An abstract method (declared with @abstractmethod) can have an basic-implementation in the abstract class! Even if they are implemented, designers of subclasses will be forced to override the implementation. Like in other cases of "normal" inheritance, the abstract method can be invoked with super() call mechanism. This enables providing some basic functionality in the abstract method, which can be enriched by the subclass implementation.
##________________________________________  ___________________________

