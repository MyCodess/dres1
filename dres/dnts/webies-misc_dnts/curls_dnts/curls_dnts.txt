_______________________________ curl _dnts...: ________________________
/:240324  :  first_dnts-with-full-review of everything.curl.dev !

#####  ==========  urls/res/nts/....:
	https://curl.se/docs/tutorial.html  -->! full-URL-eg !
	https://curl.se/
	BK/full-doc:  https://everything.curl.dev/
	man curl , https://curl.se/docs/manpage.html , curl --manual

	--- helps:
	curl -h / --help		##-short-main-listing (categories-listing)
	curl -h / --help all	##-long-main-listing / full-listing
	curl -h category        ##- list available help categories
	curl -h <category-xx>   ##- category-help , eg:  curl -h  http
	curl -h  http
	---
	curl -v / --trace   --> debugging/tracing...
##________________________________________  ___________________________



#####  ==========  Tips/nts:
	- ! problems/debugs:  -v / --trace
	- Proxys : -X /OR ENV-Vars: http_proxy, HTTPS_PROXY, FTP_PROXY , ALL_PROXY , NO_PROXY #--see-Tut: "Environment Variables"
	- Session : see "Persistent Connections" in Ref-Tut ! so: Specifying multiple files on a single command line makes curl transfer all of them, one after the other in the specified order; specify -o for EACH URL to save each in seperate files! /OR -O for all with remote-names!?
##________________________________________  ___________________________


#####  ==========  cdmline-options/args/params/urls/... nts/syntax/...:
	- https://everything.curl.dev/cmdline/index.html
	
	--- options/args
	- ! https://everything.curl.dev/cmdline/options.html :
	- ! problems/debugs:  -v / --trace
	- from a file eg: -d @f1.txt
	- negate options: --no-xxx eg: --no-verbose
	- config-file for params/args reading:  curl --config / -K <file1> ... ##-- https://everything.curl.dev/cmdline/configfile.html

	--- URLs:
	- name all locally save filenames same as remote-ones.  "--remote-name-all" flag automatically makes curl act as if -O was used for all given URLs that do not have any output option.
	- trurl : trurl parses, manipulates and outputs URLs and parts of URLs:  https://everything.curl.dev/cmdline/urls/trurl.html , https://curl.se/trurl/manual.html , 
##________________________________________  ___________________________


#####  ==========  HTTP-curl:
	- ! https://everything.curl.dev/http/index.html
	- curl -h  http
	- Methods: GET is default;  using -d or -F makes it a POST ; -I generates a HEAD ; and -T sends a PUT

	_______:  POSTs:
	- https://everything.curl.dev/http/post/index.html
	- POSTs covert to GET and vs. : -G  , https://everything.curl.dev/http/post/convert-to-get.html
	- ! -d vs. -F  : https://everything.curl.dev/http/post/postvspost.html  : -F for enctype=multipart Forms !
	- for redirects (3xx codes / Location: in Header) and the problem with GET/POST see the redirections section below!

	_______:  redirections / -L / location: :
	https://everything.curl.dev/http/redirects.html
	-- redirects-response (301/302/303/Header-"Location:")  and org-method used (GET/POST):
	- 301 == permanent-redirect (cached in browser/agent) ,  302 == tempo-redirect! , 303 simillar to 302 , (newer:  308 307 :  Keep original method GET/POST)
	- ! curl does NOT follow redirects/301/302/Location:/ , except if you tell him to do with: -L / --location option !
	- All three of these response codes, 301 and 302/303, assume that the client sends a GET to get the new URI, even if the client might have sent a POST in the first request. This is important, at least if you do something that does not use GET.
	- redirections to the new location is ALWAYS then GET in a browser (curl does NOT remember/cache it!) ! even if the org-request was POST !!
	- so in case of POST you have to manually take the new redirect-URL and do a POST again, if wated still POST !! :
	- new: Keep original method with code: 308	307  (new in HTTP !); see link above!
	- !! You can tell curl to not change the non-GET request method to GET after a 30x response by using the dedicated options for that: --post301, --post302 and --post303.

	_______:  cookies:
	- ! https://curl.se/docs/http-cookies.html  ,  https://everything.curl.dev/http/cookies/index.html
	- Server-sets: Cookies are set by the server with the Set-Cookie: header !
	- Session-Cookies:   A cookie without an expire time is called a session cookie and is meant to live during the session but not longer.
		A session in this aspect is typically thought to be the life time of the browser used to view a site. When you close the browser, you end your session.
	--- curl & cookies:
	- ! since curl has no session, cookies are, by default, ignored/forgotten, except if you switch on the cookie engine to make curl keep track of cookies it receives, with "-b"
	- you can simulate (session-)cookies with curl by using: curl -c <save-cookies-to-file/ cookiejar> -b <read-cookies-from-file/ cookiejar> ...
	- curl itself has no notion of a session and it does not know when a session ends so it does not flush session cookies unless you tell it to.
	- -c is the instruction to write cookies to a file, -b is the instruction to read cookies from a file. Oftentimes you want both.
	- !! -c  <save-cookies-to-file/jar> :  ONLY at the END of request-response-session! NOT during it!
		-c  instructs curl to write down all its known cookies to a file, the cookie jar, right BEFORE it exits (so at the END).
		It is important to remember that curl only updates the output cookie jar on EXIT and NOT DURING its lifetime, no matter how long the handling of the given input takes.
	- fields in a cookiesFIle/jar:  https://everything.curl.dev/http/cookies/fileformat.html

	_______:  headers (NOT the HEAD method! but only header of request/respones as contrary to body !)
	- ! DIFF:  header of request/respones as contrary to body  <--->  HEAD method/verb , as GET/POST/...
	- https://everything.curl.dev/http/modify/headers.html
	- headers-of-request  (sending):   -H "xx: yy"  ; see  https://everything.curl.dev/http/modify/headers.html
	- Headers-of-response (receiving): fetch only response-header (NO body): -I/--head , fetch/show-also-header+body: -i/--include , save-header: -D/--dump-header <head1>

	_______:  auth /passwords / logins:
	- passwords / auth:  https://everything.curl.dev/cmdline/passwords.html , https://everything.curl.dev/http/auth.html
	- post-login (see also below section: djangos): https://everything.curl.dev/http/browserlike.html ,
		typical usage: curl -d user=daniel -d secret=qwerty -d id=bc76 https://example.com/login.cgi -b cookies -c cookies -L -e "https://example.com/" -o out
	--- hiding pw on cmdline...:
	- using a config-file:  curl --config /tmp/t1.cnf ; and in t1: --user <username>:<password>  # and also other conf stuff ...!
	- using netrc file: curl -n ... (using default ~/.netrc bzw. ~/_netrc) #/OR: curl -k --netrc-file /tmp/.netrc ; in /tmp/.netrc pro target-pc/server a line as: machine example.com login  myname1 password  mypw1 # see https://everything.curl.dev/usingcurl/netrc.html
	- piping ...as: echo 'user = "defn:password"' | curl -K - https... #-OR: PW=$(cat /tmp/rz) ... #-OR: cat password.txt | sed 's/^/user=":/;s/$/\"/' | curl ... -K ..
##________________________________________  ___________________________


#####  ==========  SSL/TLS/HTTPS/Certs :
	- TLS/SSL:   https://everything.curl.dev/usingcurl/tls.html
	- SSL/TLS/Certs-auth:   https://curl.se/docs/sslcerts.html
##________________________________________  ___________________________


#####  ==========  JSONs:
	- https://everything.curl.dev/http/post/json.html  , --json :
	--- sending json data:
	- from file:     curl --json @json.txt https://example.com/
	- from stdin:    echo '{"a":"b"}' | curl --json @- https://example.com/
	- from cmdline:  curl --json '{"tool": "curl"}' https://example.com/
	- from file+cmdline : Send JSON from a file and concatenate a string to the end: curl --json @json.txt --json ', "end": "true"}' https://example.com/
	- problem with " bzw. ' on cmdline: use "jo" cmd as:  jo name=jo n=17 parser=false | curl --json @- https://example.com/
	--- recieving:
	- Send a basic JSON object to a server, and pretty-print the JSON response: curl --json '{"tool": "curl"}' https://example.com/ | jq
	- Send the JSON with jo, print the response with jq: jo name=jo n=17 | curl --json @- https://example.com/ | jq
	--- utils:
	- use "jo" to convert JSONs out of xx=yy ...., https://github.com/jpmens/jo , msys2:  pacman -S ucrt64/mingw-w64-ucrt-x86_64-jo
	- use "jq" to handle/formatting the response,...
##________________________________________  ___________________________


#####  ==========  Py-curl:
	- ! https://curlconverter.com/    : curl-cmds --> Py-code (requests.Lib)
	- https://ryan.govost.es/http-translator/
	- VSCode-curl-extension:  https://marketplace.visualstudio.com/items?itemName=curlconverter.curlconverter
	- pycurl LIB :  http://pycurl.io/
##________________________________________  ___________________________


#####  ==========  DJANGO + curl:
	- due to CSRF-tokens more points/steps for auth:
		1) you get the first cooky-file before login with username+pw (so basically with loading the login-page itself, django send the first csrf-key to the browser!) ;
		2) then you login with your name+PW+first-csrf-cooky and django produces a csrf-login-token for you based on your name+PW+first-csrf-cooky and returns to you your csrf-login-token !
		So, you get the second cooky/csrf-token for further pages! so the second csrf-cooky is your loggedin-token and you do NOT need any more usrename+pw ...:
		- it also requires always referer-param from the same URL/ -e ... ! so:
	curl -k -e http://localhost:8000/  -L -i  http://localhost:8000/auth/login/?next=/  -c cooks1.txt >| p1.html  ##-you get both csrftoken-cooky and csrfmiddlewaretoken-form-field :
	grepi csrf *
	curl -k -e http://localhost:8000/ -b  cooks1.txt  -c cooks2.txt -d 'csrfmiddlewaretoken=XUADnl9BJ1gsQjPfBbxRbg2JAaLPz1mNAcmKfUDQDKp2k5pk60bIQUOJy6ifAXl4&username=u11&password=u11' -L 'http://localhost:8000/auth/login/?next=/'  >| p2.html
	#- now for further queries you require only the second cooky:
	curl -k -e 'http://localhost:8000/auth/login/?next=/' -b  cooks2.txt   'http://localhost:8000/infoblox/records/aaaa/'   -i  -L >| aaaa.html
	curl -k -e 'http://localhost:8000/auth/login/?next=/' -b  cooks2.txt   'http://localhost:8000/infoblox/records/cname/'  -i  -L >| cname.html
##________________________________________  ___________________________


#####  ==========  qckys/oneliners/....:
	- curl -k -e 'about:blank' -A 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36' ...
	- header print : only-header: curl -I ... ; header + page/body:   curl -i ...
	- SSL/TLS-certs NOT verifying (ignore, eg: for local servers...):  -k / --insecure ;see https://curl.se/docs/sslcerts.html
##________________________________________  ___________________________

