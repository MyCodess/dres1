___________________ dj-tut1-/:240109 _______________________________________

~/ofc1/cod1/works1/dj11   ##-- pwd -P  : /c/Users/DKX8H1N/var3/w3/cod1/works1/dj11
prj  : netserv11  ::  mysite
app1 : ix1        ::  polls
for now prj and app1 on the same dir-level.

#####  ========== __CP__ : nts-dj-DIRs:
    --- ! DIFF :  outer/dj-container-/BASE_DIR  (containing manage.py , usu. also containg user-Apps)   <--->   inner-/djSettings-/djPrj-DIR (containing settings[.py])
        - the OUTER/BASE_DIR (./netserv11/ , containing manage.py) is ONLY the container-folder and can be RENAMED/moved anytime ! Its name doesn’t matter to Django!
        - the INNER/settings (./netserv11/netserv11/ , containing settings[.py] + __init__.py) is THE  DJANGO-prj-dir !!  Its name is the Python package name you’ll need to use to import anything inside it !
        -- So, dir-levels:
        - ./netserv11/            ::  outer/dj-container-/BASE_DIR , manage.py   ##-- can be RENAMED/moved anytime !
        - ./netserv11/netserv11/  ::  inner-/djSettings-/djPrj-DIR (containing setting.py , asgi, wsgi, urls.py)
        -./netserv11/ix1/         ::  user_app1-folder, app1-views/models/...
    - BASE_DIR  == container-folder (containing manage.py):
		- python -c "import netserv11.netserv11.settings; print(netserv11.netserv11.settings.BASE_DIR)" ##--> C:\Users\DKX8H1N\var3\w3\cod1\works1\dj11\netserv11
        - bzw.  ~/ofc1/cod1/works1/dj11/netserv11 ; $ python -c "import netserv11.settings ; print(netserv11.settings.BASE_DIR)"
		- ! if "Not Found Module ..." error : add __init__.py to all above DIRs !
##________________________________________  ___________________________


#####  ==========  APP-setup: views + urls  /Tut1:
	--- dj-prj-setup:
    cd ~/ofc1/cod1/works1/dj11 ; 
    django-admin  startproject  netserv11
	--- dj-app1-setup:
    ~/ofc1/cod1/works1/dj11/netserv11 ::
    $ python manage.py startapp ix1
    $ vi ix1/views.py  ##--> add index method
    $ vi ix1/urls.py  ##--> add index url
    $ vi netserv11/urls.py  ##--> add app-url!
    $ vi netserv11/settings.py ]  ##--> INSTALLED_APPS : add  ix1.apps.Ix1Config ! can be done also after DB-migrates!
##________________________________________  ___________________________


#####  ==========  APP-setup: models/DBs-migrates  /Tut2:
    $ vi netserv11/settings.py   ## TZ , DB-Engine/Adapter if required.
    $ vi ./ix1/models.py  ##--> add model-CLASSES ...
    $ python manage.py makemigrations ix1
    $ [ python manage.py sqlmigrate ix1 0001 ]  ##-just to see the SQL-stmts of next step/migrate!; if have more than 0001 generted-Models, just take all!
    $ python manage.py migrate  ix1
    
    --- [...]:
    - [playing with the api]
    - ! py-shell with django:  python manage.py shell  ##--here  manage.py sets the DJANGO_SETTINGS_MODULE environment variable, which gives Django the Python import path to your <prj>/settings.py file. see django-docs/intro/tutorial02.html
    - AdminUser-create:   python manage.py createsuperuser  --help  ;  python manage.py createsuperuser  --username u11  --email u11@test1.io   ##--PW: same: u11 !
    - AdminPortal-Reg:  vi ix1/admin.py  ##--> admin.site.register(<some ix1-model-class-name to be managed online>)
    - check prj-status...:  "python manage.py check" : this checks for any problems in your project without making migrations or touching the database.

    --- runserver:
    - python manage.py runserver  [port]
    - http://127.0.0.1:8000/  +  http://127.0.0.1:8000/admin/

    --- dnts:
    - app-dir/tree could be also anywhere else and not definitely in prj-dir !!
    - makemigrations : you’re telling Django that you’ve made some changes to your models (in this case, you’ve made new ones) and that you’d like the changes to be stored as a migration.
    - sqlmigrate : show SQL-stmts after makemigrations (before migrate, justt for chk) :  python manage.py sqlmigrate ix1 0001
    - sqlmigrate command doesn’t actually run the migration on your database - instead, it prints it to the screen so that you can see what SQL Django thinks is required.
    - DB-foreigKey-fields: xxxx_id added by default to filed-name ! as question_id here!
    ---
##________________________________________  ___________________________

