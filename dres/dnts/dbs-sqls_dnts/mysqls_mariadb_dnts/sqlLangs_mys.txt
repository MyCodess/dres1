_____________________ sql-queris to schemas/DBs/Dictionary/... mysql _______________
- rdb == db1 (sample-DB)

#####  ==========  show ... (information_schema.geneal.queries):
	-! DIFF show <--> select cases!! see below for eg!
	-! help show
	-! SELECT database(), user(), VERSION(), CURRENT_DATE(), now();
	--- server/mysql-stuff queries:
		- version of mysql?:  show variables like '%version%';
	--- DB-queries/show:
		- show databases;
		- connect DB1;
		- select database();  /* current databse */
		- which database is currently selected/using?:  SELECT DATABASE();
	--- Schema-queries/show:
		- show tables;
	---! show ORIGINAL-create-sql-stmt for current objects/tables/schema/...:
		-- create original stmts:
		SHOW CREATE TABLE account;  ##sql-stmt-for-account!!
		show create database rdb;
		SHOW CREATE VIEW view_name
		-- listings  of tables/objects/...:		
		-! SHOW TABLE STATUS from rdb;
		show tables from information_schema;
##________________________________________  ___________________________


#####  ==========  Transactions/commits/rollbacks/...:
	-! see ref--12.3. MySQL Transactional and Locking Statements
	-! mysql> help START TRANSACTION ; help ISOLATION ;   /OR category to see all items: help transactions;
	-!! in <DROP table ...> , the RESTRICT and CASCADE are permitted to make porting easier (eg from Oracle,..). In MySQL 5.5, they do NOTHING.
	--- COMMIT / AUTOCOMMIT:
		- SET autocommit = {0 | 1}   #default is autocommit by mysql!! otherwise:  SET autocommit=0; .... ; commit/rollback;
		-! autocommit [452] is a session variable and must be set for each session!
	--- START TRANSACTION; BEGIN;  ... ;  COMMIT/ROLLBACK;  (END is NOT	needed! commit works as end!)
		-! Beginning a transaction causes any pending transaction to be committed
		-! for disabling autocommit mode implicitly for a single series of statements, use the START TRANSACTION statement:
		   START TRANSACTION; SELECT @A:=SUM(salary) FROM table1 WHERE type=1; UPDATE table2 SET summary=@A WHERE type=1; COMMIT;
		-! DLLs can NOT be rolledback and they end the transaction!! so, NO rollback for create, drop, or alter tables ...!
		   so do NOT include DLLs in a transaction!! see 13.3.2. Statements That Cannot Be Rolled Back  + 13.3.3. Statements That Cause an Implicit Commit
		-! implicit-commit/-END of the current transaction is done by: DLLs, Admin setuff (create userm grant,..), data loading ,...! so do NOT include them in a transaction!! see 13.3.3. Statements That Cause an Implicit Commit
		- START TRANSACTION performs an implicit UNLOCK TABLES !
		-! LOCK TABLES and transction:  see 13.3.5.1. Interaction of Table Locking and Transactions
		- With START TRANSACTION, autocommit remains disabled until you end the transaction with COMMIT or ROLLBACK. The autocommit mode then reverts to its previous state
	--- LOCK / UNLOCK TABLES :  (NOT a real transaction-safe facility!!):
		- see 13.3.5. LOCK TABLES and UNLOCK TABLES Syntax   +   13.3.5.1. Interaction of Table Locking and Transactions
		-! table lock protects only against inappropriate reads or writes by other sessions.
		   The current session holding the lock, even a read lock, can perform table-level operations such as DROP TABLE.
		-!! While the locks for tables eg T1,T2,T3 are held, the session can access ONLY the locked tables, and NOT the others!! (exception: INFORMATION_SCHEMA)
		   ! A session that requires locks must acquire all the locks that it needs in a single LOCK TABLES statement. 
		-!! session-dependency and disconnections:  see  [1315] :
		   client session terminates, whether normally or abnormally, the server implicitly releases all table locks held by the session (transactional and nontransactional).
		   If the client reconnects, the locks will no longer be in effect. In addition, if the client had an active transaction, the server rolls back the transaction upon disconnect, and if reconnect occurs, the new session begins with autocommit enabled.
		   For this reason, clients may wish to disable auto-reconnect. With auto-reconnect in effect, the client is not notified if reconnect occurs but any table locks or current transaction will have been lost.
		-! LOCK TABLES is NOT transaction-safe and implicitly commits any active transaction before attempting to lock the tables.
		-! limitations for LOCK TABLE : see  ref--13.3.5.  +  13.3.5.3. Table-Locking Restrictions and Conditions
##________________________________________  ___________________________


#####  ==========  Foreign.Keys/Constraints/inter-relationships/dependencies/....:
	-!! see 14.3.5.4. FOREIGN KEY Constraints (refman-5.5-en.a4_1212pdf)
	-!-DEFs:  parent/child tables  bzw. referencing/referenced tables
		create table T2 (c2 int, ..., KEY c2, ...,  FOREIGN KEY (c2) REFERENCES T1(c1), ...);
		T2 is child/referencing table ,and T1 is parent/referenced table!
		parent keeps the real values. child only references them! 
		Foreign key relationships involve a parent table that holds the central data values, and a child table with identical values pointing back to its parent. The FOREIGN KEY clause is specified in the child table. The parent and child tables must both be InnoDB tables.
	- disabling/enabling foreign-keys:   SET foreign_key_checks = 0;  #bzw. =1
	---- showing constraints / FKs:
		- SHOW CREATE TABLE child_table1;
		- /OR mysqldump -u dbu1 db1  |  grep -i "CREATE\|CONSTRAINT"
		- /OR in INFORMATION_SCHEMA :
			-!! main infos in: INFORMATION_SCHEMA.KEY_COLUMN_USAGE table describes which key columns have constraints :
			-!! listing of referenced/parent tables: 
			SELECT ke.referenced_table_name parent, ke.table_name child, ke.constraint_name FROM information_schema.KEY_COLUMN_USAGE ke WHERE ke.referenced_table_name IS NOT NULL ORDER BY ke.referenced_table_name, ke.table_name;
			- more infos in INFORMATION_SCHEMA.TABLE_CONSTRAINTS  +  INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
			select * from INFORMATION_SCHEMA.TABLE_CONSTRAINTS where TABLE_NAME like 'child%';
	--- requirements/considerations/nts:
		-! see ref55.1212: 14.3.5.4. FOREIGN KEY Constraints
		-! MUST be indexed:  InnoDB requires indexes on foreign keys and referenced keys so that foreign key checks can be fast and not require a table scan. 
		-! Corresponding columns in the foreign key and the referenced key must have similar internal data types inside InnoDB so that they can be compared without a type conversion. The size and sign of integer types must be the same. The length of string types need not be the same. For nonbinary (character) string columns, the character set and collation must be the same.
	--- ALTER /DROP: adding/droping FKs (obviously no adaptions possible; only ad/drop):
		- ALTER TABLE child1 DROP FOREIGN KEY 'child_parent_fk1';
		- To alter the storage engine, drop any foreign key constraints first.
		- If the FOREIGN KEY clause included a CONSTRAINT name when you created the foreign key, you can refer to that name to drop the foreign key. Otherwise, the fk_symbol value is internally generated by InnoDB when the foreign key is created. To find out the symbol value when you want to drop a foreign key, use the SHOW CREATE TABLE.
	--- ForeignKey-modifications/recreating, eg to convert it to be CASCADEd on delete/update, eg:
		(obviously there is no ALTER CONSTRAINT ,..., so, Umweg:)
		alter table categories_product_nocascade drop  FOREIGN KEY categories_product_nocascade_ibfk_1;
		alter table categories_product_nocascade add   FOREIGN KEY categories_product_nocascade_ibfk_2  (category_id) REFERENCES categories (id) ON DELETE CASCADE ON UPDATE CASCADE;
		now a delete on the table categories will be possible, and the corresponding rows on categories_product_nocascade will be deleted also!
		eg DELETE FROM categories WHERE id = 2;  will be cascaded into referencing tables as categories_product_nocascade!
		! see the sqmples in nts-dir 
	---! ON DELETE /UPDATE, DROP ???:  Referential Actions (on DELETE or on UPDATE of parent-table, what should happen with the referencing rows in the child table??):
		- options in innodb:   CASCADE , SET NULL , RESTRICT == NO ACTION ==default     #see  14.3.5.4. FOREIGN KEY Constraints (refman-5.5-en.a4_1212pdf)
		- ..., FOREIGN KEY (parent_id) REFERENCES parent(id) ON DELETE CASCADE; /OR ON UPDATE SET NULL; ...
		- DROP parent?: You cannot issue DROP TABLE for an InnoDB table that is referenced by a FOREIGN KEY constraint, unless you do SET foreign_key_checks = 0. When you drop a table, the constraints that were defined in its create statement are also dropped.
	---! insert/update/modifying tables with foreign.key-relations, and the references-violation problems,...:
		SET foreign_key_checks = 0; SOURCE dump_file.sql /OR inserts/updates... ;  SET foreign_key_checks = 1;
		-!! finding NON-consistent-child-rows  (after eg  foreign_key_checks = 0; modification of parent-table, ...; so rows that violate intended foreign key constraints):
		    select child.id from child left join parent on (child.parent_id=parent.id) where child.id is not null and parent.id is null;
##________________________________________  ___________________________


#####  ==========  dates/times: see mysql.ref--tut--ch.3.3.4
	- current-date/-year:  select  curdate() as CurrDate, year(curdate()) CurrYear, month(curdate()) CurrMonth;
	- SELECT name, birth, death, (YEAR(death)-YEAR(birth)) - (RIGHT(death,5)<RIGHT(birth,5)) AS age;
##________________________________________  ___________________________


#####  ==========  pattern-matching / REGEXP in sql queries:
	-! see  3.3.4.7. Pattern Matching  +  11.5.2, “Regular Expressions”
	- "_"  matches one char, eg  names containing exactly five characters: SELECT * FROM pet WHERE name LIKE '_____';
	- use "REGEXP" instead "like", for extended mysql-regexp! eg:  SELECT * FROM pet WHERE name REGEXP '^b';
	- REGEXP 'ab'  ==  like '%ab%';
	- names containing exactly five characters with regexp:   SELECT * FROM pet WHERE name REGEXP '^.....$'; ##-bzw.:  REGEXP '^.{5}$' ;
##________________________________________  ___________________________


#####  ==========  VARs-user-defined-in-mysql:
    -! see ref--9.4. User-Defined Variables  (in  Chapter 9. Language Structure) +  ref--3.6.5. Using User-Defined Variables
	- eg: 
	mysql> SELECT @min_price:=MIN(price), @max_price:=MAX(price) FROM shop;  SELECT * FROM shop WHERE price=@min_price OR price=@max_price;
	mysql> select  TABLE_NAME into @v1 from tables where TABLE_NAME like 'INNODB_CMP';  select @v1;
##________________________________________  ___________________________


#####  ==========  ARRAYs/SETs/LISTs/....:
	- SETs exist (and SET-Operations as IN,...), but ARRAYS,.. are just simulations, as:
	--- SETs :
		-! see ref--11.4.5. The SET Type
		- SET is just a strin with comm-separated-elements! eg: SET('a','b','c','d');
		  /OR set @arr1 = "aa,rr,55,2,33" ; select find_in_set(2,@arr1);
		- queris for SETs: Normally, you search for SET values using the FIND_IN_SET() [1037] function or the LIKE [1045] operator:
		  SELECT * FROM tbl_name WHERE FIND_IN_SET('value',set_col)>0;
		  SELECT * FROM tbl_name WHERE set_col LIKE '%value%';
	--- ARRAY-vars:
		-! ther are NO ARRAYs in mysql, but they can be simulated
		   /either by tables (eg creating a temporary table and insert the values in a column of this table, even mybe with id/counter in another column, as an index
		   /OR by using SETs bzw. Stings-with-comma-separated-elements and then using FIND_IN_SET function (see below)!
		- ARRAY (simulation with CONCAT to add elements, and FIND_IN_SET to inquire elements):  set @arr1 = "aa,rr,55,2,33" ; select find_in_set(2,@arr1);
		- or as in: SET x = 1; SET str =  ''; WHILE x  <= 5 DO SET  str = CONCAT(str,x,','); SET  x = x + 1; END WHILE;
		- IN (...) : SELECT COUNT(*) FROM tablex WHERE name IN ("hi", "hello", "good", ...)
		-! also see the "ENUM" Data-Type. somtimes helpful! see  ref--11.4.4. The ENUM Type
##________________________________________  ___________________________


#####  ==========  AUTO_INCREMENT feature:
	-! see ref--ch.3.6.9. Using AUTO_INCREMENT	+ links there at the end!
	- by inserts, use NULL or 0 for AUTO_INCREMENT columns, if you want that mysql assign it:
	  No value was specified for the AUTO_INCREMENT column, so MySQL assigned sequence numbers automatically. You can also explicitly assign NULL or 0 to the column to generate sequence numbers: see ref--3.6.9. Using AUTO_INCREMENT
	- most recent AUTO_INCREMENT value with the LAST_INSERT_ID() eg: 
	  SELECT @last := LAST_INSERT_ID();   INSERT (NULL, INTO shirt VALUES 'dress', 'orange', @last);
	- Use a large enough integer data type for the AUTO_INCREMENT column to hold the maximum sequence value you will need. otherwise then error!
	- 
##________________________________________  ___________________________


#####  ==========  formatted outputs:
	- separating rows by a line-separator:  select TABLE_NAME, TABLE_SCHEMA, "\n----------------------------------------------------------------" from information_schema.tables;
##________________________________________  ___________________________


#####  ==========  CHARSETs, charachter sets...:
    -! see ref--20.1. The INFORMATION_SCHEMA CHARACTER_SETS Table
	- show variables like '%char%';  ##--see output for dir, eg:  
	  character_sets_dir       | /opt/gts/3pp/mysql/share/charsets/
	- setting eg:  load data .... CHARACTER SET 'utf8' ...
    --- showing/listing:
        - SHOW CHARACTER SET [like 'utf%'];
        - SELECT * FROM INFORMATION_SCHEMA.CHARACTER_SETS
        -! certain table/column:  select charset(col2) from t1;
##________________________________________  ___________________________


